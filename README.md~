PreProcess -- SCT rewrite (https://github.com/dymatic/custom-language-translator)
============
Welcome to the page for the humble SCT rewrite, implemented in Haskell. Originally this was a proof-of-concept implementation for applying LibHaskell, but it has grown into a project of its own. This will DEPRECATE SCT when it is feature-complete (with Noran Makefiles and a changable langdefines file).

Limitations over SCT
====================
Language titles are not present, and I have decided that they will not be present. Currently your langdefines file will be installed to /etc/Preprocess/langdefines, but in a few versions (one major version) that will be changeable.

Advantages over SCT
===================
You can have multiple lvals on one line with the '|' token.
	say|yell_cout
is the same as writing
	say_cout
	yell_cout
in the old SCT. Old SCT files can still be read, but this provides a MUCH shorter way of using multiple lvals with one rval.

Features That will be implemented
=================================
	-Variant Configuation Files
	-Better Command-line option handling with a --overwrite flag.

The Future
===========
Another plan I have is to implement changes from this repo into the SCT repo by calling Haskell functions from its C++ code, or just through a vanilla rewrite (or even through Guile Lisp). Users of the old SCT (I may be the only one, but if you use it, listen up) can "return home" after this project is EOL so that they won't need the massive Haskell libs.

I am also just learning Haskell, so I am going to go back and try to replace some of the guard functions with map cause for efficiency, and use Classes and what-not. This is my Haskell poster-child project, after all.

License
=========
This project is licensed under the BJLPL, or Black Joe Lesser Public License. If the license is TL;DR (It really shouldn't be; I'm not very verbose) it means that you have all the rights that the GPL gives you, but you can relicense under whatever. You can do anything with the code except make money from original copies (proxying) and name your derivitives Preprocess.
